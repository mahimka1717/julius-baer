import sharp from 'sharp';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function generateResponsiveImages() {
  const imagesDir = path.join(__dirname, 'public', 'images');
  const allFiles = fs.readdirSync(imagesDir);
  console.log('üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ images:', allFiles);
  
  const files = allFiles.filter(file => {
    const isJpg = file.endsWith('.jpg');
    const hasSizePrefix = file.includes('_400') || file.includes('_600') || file.includes('_800');
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${file}:`, { isJpg, hasSizePrefix });
    
    return isJpg && !hasSizePrefix;
  });
  console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', files);

  console.log('üñºÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

  for (const file of files) {
    const inputPath = path.join(imagesDir, file);
    const filename = path.parse(file).name;
    
    const output400 = path.join(imagesDir, `${filename}_400.jpg`);
    const output600 = path.join(imagesDir, `${filename}_600.jpg`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª—ã
    if (fs.existsSync(output400) && fs.existsSync(output600)) {
      console.log(`‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${file} - –≤–µ—Ä—Å–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç`);
      continue;
    }

    console.log(`üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${file}`);

    try {
      // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é 400px (–º–æ–±–∏–ª—å–Ω—ã–µ)
      if (!fs.existsSync(output400)) {
        await sharp(inputPath)
          .resize(400, 400, { 
            fit: 'cover',
            position: 'center'
          })
          .jpeg({ quality: 85 })
          .toFile(output400);
      }

      // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é 600px (–ø–ª–∞–Ω—à–µ—Ç—ã)
      if (!fs.existsSync(output600)) {
        await sharp(inputPath)
          .resize(600, 600, { 
            fit: 'cover',
            position: 'center'
          })
          .jpeg({ quality: 90 })
          .toFile(output600);
      }

      // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é 800px –¥–ª—è Retina –º–æ–±–∏–ª—å–Ω—ã—Ö
      const output800 = path.join(imagesDir, `${filename}_800.jpg`);
      if (!fs.existsSync(output800)) {
        await sharp(inputPath)
          .resize(800, 800, { 
            fit: 'cover',
            position: 'center'
          })
          .jpeg({ quality: 90 })
          .toFile(output800);
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω—ã: ${filename}_400.jpg, ${filename}_600.jpg, ${filename}_800.jpg`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}:`, error);
    }
  }

  console.log('üéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateResponsiveImages().catch(console.error);
